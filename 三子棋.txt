#include<bits/stdc++.h>
#include<time.h>
#include<windows.h>
using namespace std;
int ROW,COL,flag=0,f=0;
void menu()
{
	cout<<"**********************"<<endl;
	cout<<"***1.play****2.exit***"<<endl;
	cout<<"**********************"<<endl;
}
void initboard(int row,int col,char (*board)[500])
{
	for (int i=0;i<row;i++)
	  for (int j=0;j<col;j++)
	  {
	  	 board[i][j]=' ';
	  }
}
void displayboard(int row,int col,char (*board)[500])
{
	for (int i=0;i<row;i++)
	{
		for (int j=0;j<col;j++)
		{
			if (j<col-1)
			    printf(" %c |",board[i][j]);
			else
			    printf(" %c \n",board[i][j]);
		}
		if (i<row-1)
		{
			for (int j=0;j<col;j++)
			{
				if (j<col-1)
				    printf("---|");
				else
				    printf("---\n");
			}
		}
	}
	cout<<endl;
}
void playmove(int row,int col,char(*board)[500])
{
	char x,y;
	printf("\n玩家\n");
	printf("请输入要下的坐标(x y)：> ");
	while (1)
	{
		scanf("%c %c",&y,&x);
		getchar();
		printf("%c %c\n",y,x);
		if (x>='1'&&x<=row+'0'&&y>='1'&&y<=col+'0')
		{
			if (board[x-'0'-1][y-'0'-1]==' ')
			{ 
				board[x-'0'-1][y-'0'-1]='o';
				break; 
			} 
			else
				printf("该坐标已被占用，请重新输入！！ -_-\n");
		}
		else
			printf("坐标输入错误，请重新输入！！ -_-\n");
	}
}
void computermove(int row,int col,char (*board)[500])
{
	printf("\n电脑\n");
	if (board[row/2][col/2]==' ')
	{
		board[row/2][col/2]='x';
		return;
	}
	for (int i=0;i<row;i++)//判断行 列 
	{
		int sum1o=0,sum1x=0,sum2o=0,sum2x=0;
		for (int j=0;j<col;j++)
	    {
			if (board[i][j]=='o')
			    sum1o++; 
			if (board[i][j]=='x')
			    sum1x++; 
			if (board[j][i]=='o')
			    sum2o++;
			if (board[j][i]=='x')
			    sum2x++;
		}
		if (sum1o>=ceil(row*1.0/2)&&sum1x==0)
	    {
		    for (int j=0;j<col;j++)
	            if (board[i][j]==' ')
		        {	
				    board[i][j]='x';
				    return;
			    }
	    }
	    if (sum2o>=ceil(col*1.0/2)&&sum2x==0)
	    {
		    for (int j=0;j<row;j++)
	            if (board[j][i]==' ')
		        {	
				    board[j][i]='x';
				    return;
			    }
	    }
	}
	int sum1o=0,sum1x=0,sum2o=0,sum2x=0;//判断主副对角线 
	for (int i=0;i<row;i++)
	{
		if (board[i][i]=='o')
		    sum1o++;
		if (board[i][i]=='x')
		    sum1x++;
	}
	for (int i=0;i<row;i++)
	{
		if (board[i][row-i-1]=='o')
		    sum2o++;
		if (board[i][row-i-1]=='x')
		    sum2x++;
	}
	if (sum1o>=ceil(row*1.0/2)&&sum1x==0)
	{
		for (int i=0;i<row;i++)
		{
			if (board[i][i]==' ')
			{
				board[i][i]='x';
				return;
			}
		}
	}
	if (sum2o>=ceil(row*1.0/2)&&sum2x==0)
	{
		for (int i=0;i<row;i++)
		{
			if (board[i][row-i-1]==' ')
			{
				board[i][row-i-1]='x';
				return;
			}
		}
	}
	//如果行、列、对角线都没有一半以上的 
	int x,y;
	while (1)
	{
	    x=rand()%row;
    	y=rand()%col;
    	if (board[x][y]==' ')
	    {
		    board[x][y]='x';
		    return;
	    } 
	}
}
void judge(int row,int col,char (*board)[500])
{
	for (int i=0;i<row;i++)//判断行 列 
	{
		int sum1o=0,sum1x=0,sum2o=0,sum2x=0;
		for (int j=0;j<col;j++)
		{
			if (board[i][j]=='o')
			    sum1o++;
			if (board[i][j]=='x')
			    sum1x++;
			if (board[j][i]=='o')
			    sum2o++;
			if (board[j][i]=='x')
			    sum2x++;
		}
		//cout<<"i "<<i<<" "<<sum1o<<" "<<sum1x<<" "<<sum2o<<" "<<sum2x<<endl;
		if (sum1o==row||sum2o==col)
		{
			flag=1;
			cout<<"恭喜你，获胜啦！！！ ~_~"<<endl<<endl;
			return;
		}
		if (sum1x==row||sum2x==col)
		{
			flag=1;
			cout<<"太可惜了~~ 你连电脑都打不过"<<endl<<endl; 
			return;
		 } 
	}
	int sum1o=0,sum1x=0,sum2o=0,sum2x=0;
	for (int i=0;i<row;i++)//判断主对角线 
	{
		if (board[i][i]=='o')
		    sum1o++;
		if (board[i][i]=='x')
		    sum1x++;
		//cout<<"i= "<<i<<" "<<sum1o<<" "<<sum1x<<endl;
	}
	for (int i=0;i<row;i++)//判断副对角线 
	{
		if (board[i][row-i-1]=='o')
		    sum2o++;
		if (board[i][row-i-1]=='x')
		    sum2x++;
		//cout<<"i= "<<i<<" "<<sum2o<<" "<<sum2x<<endl;
	}
	//cout<<sum1o<<" "<<sum1x<<" "<<sum2o<<" "<<sum2x<<endl;
	if (sum1o==row||sum2o==row)
    {
    	flag=1;
		cout<<"恭喜你，获胜啦！！！ ~_~"<<endl<<endl;
		return;
	}
	if (sum1x==row||sum2x==row)
	{
		flag=1;
		cout<<"太可惜了~~ 你连电脑都打不过"<<endl<<endl;
		return;
	}
	int tmp=0;
	for (int i=0;i<row;i++)
	    for (int j=0;j<col;j++)
	        if (board[i][j]==' ')
	            tmp=1;
	if (tmp==0)
	{
        flag=1;
	    cout<<"平局啦~~~"<<endl; 
	    return;
	}
	else
	    return;
}
void game()
{
	cin>>ROW;
	getchar();
	COL=ROW;
	char board[500][500];
	initboard(ROW,COL,board);//初始化棋盘 
	displayboard(ROW,COL,board);//打印棋盘
	while (1)//下棋 
	{
		playmove(ROW,COL,board);//玩家下棋
		displayboard(ROW,COL,board);//打印棋盘 
		judge(ROW,COL,board);
		Sleep(1000);
		if (flag==1)
		{
			flag=0;
			return;
		}
		computermove(ROW,COL,board);//电脑下棋 
		displayboard(ROW,COL,board);//打印棋盘 
		judge(ROW,COL,board);
		if (flag==1)
		{
			flag=0;
			return;
		}
	}
}
void test()
{
	int input=0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		cout<<"请选择：>";
		cin>>input;
		switch (input)
		{
			case 1:
				cout<<endl<<"n子棋 游戏开始 ^_^"<<endl; 
				cout<<"想要选择的游戏难度 n x n：>(提示：请输入n)"<<endl;
				game();
			    break;
			case 2:
				cout<<"退出游戏"<<endl; 
				break;
			default:
				cout<<"选择错误，请重新从选择！"<<endl; 
				break;
		}
	} while(input);
}
int main ()
{
	while(1)
	{
		test();
	}
	return 0;
}